{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"ef0ea360-89fe-56af-adec-51bc4836e870","excerpt":"React Redux를 어떻게 적용했는지, Context API와 React Redux는 무엇이 다른지 정리해봤다. React Redux를 적용할 때 Redux Toolkit을 함께 사용했다. React Redux 공식문서에서도 Redux Toolkit을 사용하길 권장하며, 실제로 사용해보니 작성해야할 코드가 줄어들어 편했다. React Redux Redux는 action이라고 불리는 이벤트를 사용해 상태를 관리하는 패턴이며, React Redux는 Redux를 React에서 사용할 수 있는 라이브러리이다. React Redux는 Redux store에 상태를 저장하고 action을 dispatch해서 store의 상태를 변경한다.  React Redux는 현재 React에서 지정한 공식 Redux UI 바인딩이다. 만약 React를 사용중이며 UI 바인딩에 Redux 개념을 이용하고 싶다면 React Redux 라이브러리가 가장 권장된다는 뜻이다. React에서 제공되는 기능과 …","fields":{"slug":"/react-redux/"},"frontmatter":{"categories":"react","title":"React Redux 적용하기","date":"November 23, 2023"}},"next":{"fields":{"slug":"/context/"}},"previous":null},{"node":{"id":"7dc36a02-e77b-563a-b9be-49dfd3ab1a44","excerpt":"React에서 props drilling을 피하고 싶거나 변수를 전역적으로 사용하고 싶을 때 상태 관리 라이브러리를 사용하곤 한다. React는 상태 관리가 가장 중요한 만큼 관련된 다양한 라이브러리들이 있다. 가장 대중적인 React Redux 부터 Recoil, Justand, Jotai, MobX 등등. 하지만 라이브러리를 사용하기 전에 React 자체 기능을 사용할 줄 알아야 한다고 생각한다. 라이브러리도 React 기능을 사용해서 만들어졌기 때문이다. 그래서 React 자체 기능인 Context API를 사용해 전역적으로 변수를 사용하는 방법을 정리했다. Context API 란? Context는 props로 전달하지 않고도 컴포넌트 트리 전체에 정보를 공유할 수 있는 수단이다. props로 전달하지 않는다는 것은 props drilling을 피할 수 있는 장점인 동시에 상태가 숨겨져 코드를 직관적으로 알아보기 힘들다는 단점을 의미한다. props를 넘겨주는 것은 단순히 …","fields":{"slug":"/context/"},"frontmatter":{"categories":"react","title":"Context API와 useReducer를 사용해서 전역적으로 변수 사용하기","date":"November 15, 2023"}},"next":{"fields":{"slug":"/react-image-size-optimization/"}},"previous":{"fields":{"slug":"/react-redux/"}}},{"node":{"id":"5557ec96-630e-50e6-aece-c6351c181fac","excerpt":"React 프로젝트에 이미지를 사이즈 생각 안하고 넣었더니 로드하는 데 시간이 오래 걸려 이미지 사이즈를 최적화했다. 이미지 사이즈 줄이기 이미지 크기가 너무 크면 로드하는 데 시간이 걸리고 이미지 크기가 너무 작다면 화질이 저하된다.\n그렇다면 이미지는 어느 정도 크기여야 적당할까? 나는 다음 말에 설득되어 이미지가 화면에서 차지하는 픽셀의 두 배 정도 크기로 이미지 사이즈를 조절했다. 단순히 화면에 표시되는 사이즈로 만들어야 한다고 생각할 수 있습니다. 물론 틀린 말은 아닙니다. 하지만 요즘 사용되는 레티나 디스플레이는 같은 공간(픽셀)에 더 많은 픽셀을 그릴 수 있기 때문에, 너비 기준으로 두 배 정도 큰 이미지를 사용하는 것이 적절합니다. - 프론트엔드 성능 최적화 가이드, 유동근 지음 화면에서 최대 너비 384px, 높이 240px로 표시되는 이미지라면 원본 이미지 사이즈를 너비 768px, 높이 480px 정도 되도록 줄였다. 이미지 화질이 그렇게 중요하지 않은 프로젝트라…","fields":{"slug":"/react-image-size-optimization/"},"frontmatter":{"categories":"react","title":"리액트 이미지 사이즈 최적화","date":"October 30, 2023"}},"next":{"fields":{"slug":"/react-code-splitting/"}},"previous":{"fields":{"slug":"/context/"}}},{"node":{"id":"f9e50ffe-ba8a-5116-a828-c25e9ea921c7","excerpt":"React 프로젝트를 최적화하는 방법 중 코드 분할과 지연 로딩에 대해 알게 되었다. 💡 코드 분할(Code splitting)이란? 하나의 빌드 파일을 한 번에 다운로드하는 대신 여러 파일로 분할해 필요할 때만 다운로드하는 것이다.\n초기 리소스 다운로드 시간을 줄일 수 있다.\n불필요한 코드 또는 중복되는 코드 없이 적절한 사이즈의 코드가 적절한 타이밍에 로드되는 것이 중요하다. 💡 지연 로딩(Lazy loading)이란? 처음 페이지가 로드될 때가 아닌, 사용자가 서비스를 이용하는 중 해당 코드가 필요해지는 시점에 분할되어 있던 코드가 로드되어 실행되는 것이다.\n처음에 한 번에 로드되지 않고 지연되었다가 로드되므로 지연 로딩이다. 따로 코드 분할하지 않으면 통합된 하나의 빌드 파일을 가지게 되는데, 그러면 처음 페이지에 접속할 때 그 통합된 빌드 파일을 로드하기 때문에 당장 필요하지 않은 코드까지도 로드하게 된다. 내 투두리스트 프로젝트에서도 투두리스트 페이지에 들어가든, 로그인…","fields":{"slug":"/react-code-splitting/"},"frontmatter":{"categories":"react","title":"lazy와 Suspense로 코드 분할하고 로드 지연하기","date":"October 29, 2023"}},"next":{"fields":{"slug":"/minimize-tailwindcss-apply/"}},"previous":{"fields":{"slug":"/react-image-size-optimization/"}}},{"node":{"id":"2facdfc2-dacb-5945-8dec-721ea4e07a94","excerpt":"[번역] Tailwind CSS에서 혼란을 방지하기 위한 5가지 모범 사례를 읽으면서 Tailwind CSS를 사용할 때  지시문을 남용하는 게 좋지 않다는 것을 알게 되었다. Tailwind CSS를 사용하던 프로젝트의  지시문을 줄이면서 느낀 것을 적어보려 한다. Bad Practice Tailwind CSS로 클래스 이름을 작성하다 보면 너무 길어져 지저분해 보일 때가 있다. 이때 와 를 사용하면 CSS 파일에 클래스를 새로 만들어 길고 지저분하게 늘어진 클래스 이름을 간결하게 만들 수 있다. 이렇게 너무 길어 뭐가 뭔지 모르겠는 클래스 이름을, 와 를 사용해 버튼의 모양과 버튼의 색에 대한 클래스로 나눠 정의 해주면, 이렇게 알아보기도 쉽고 간결하게 만들 수 있다. 와! 가독성도 좋고 만들어 둔 클래스를 재사용할 수 있으니 너무 좋다! 이렇게 하면 Tailwind CSS의 스타일을 알아보기 힘든 단점도 보완돼! 라고 생각했지만, 이 방법은 좋은 방법이 아니었다. 추상화를 위…","fields":{"slug":"/minimize-tailwindcss-apply/"},"frontmatter":{"categories":"react","title":"Tailwind CSS @apply 지시문 최소화하기","date":"October 28, 2023"}},"next":{"fields":{"slug":"/meta-theme-color/"}},"previous":{"fields":{"slug":"/react-code-splitting/"}}},{"node":{"id":"1d39d586-12cf-5b52-9b92-0165fa06c3c9","excerpt":"리액트 웹사이트를 만든 후 디바이스별로 스타일이 잘 적용되었는지 확인하던 중 이상한 현상을 발견했다. 아이폰에서 사파리로 내가 만든 웹사이트를 접속하면 다른 여타 사이트들과 달리 상단바가 까맣게 표시되어서 매우 거슬렸다. 그래서 무엇이 문제인지 알아봤다. 굉장히 삽질을 많이 했지만 결론만 말하자면, 이런 현상이 발생한 이유는  파일에 다음과 같은 코드가 포함되어 있기 때문이었다. 를 제거하고 나면 내 웹사이트에 접속할 때 다른 웹사이트처럼 상단바의 색이 자연스럽게 표시된다. 라이트모드, 다크모드 둘 다 페이지의 배경색에 맞춰 색이 적용됐다. 지금부터 이렇게 된 이유에 대해 알아보자. 사파리의 웹 사이트 색조로 물들이기 기능 아이폰의 사파리에는  기능이 있다. 웹 사이트 틸팅 기능이라고도 한다. 이 기능은 사파리에 접속했을 때 웹 사이트의 전체적인 색조를 파악한 후 상단바 등 기타 UI에 그 색조를 적용해 자연스럽게 보이도록 도와주는 기능이다. 아이폰 설정에서 사파리 탭에 들어가 기…","fields":{"slug":"/meta-theme-color/"},"frontmatter":{"categories":"html","title":"리액트 웹을 모바일 사파리에서 열었을 때 상단바가 검정색인 현상 해결하기","date":"June 25, 2023"}},"next":{"fields":{"slug":"/rest-api-https/"}},"previous":{"fields":{"slug":"/minimize-tailwindcss-apply/"}}},{"node":{"id":"2a24772e-f40a-5730-a4b3-b2bbdeba2949","excerpt":"프론트엔드 개발을 위해 백엔드 REST API 서버를 만들었는데 다음과 같은 에러가 발생했다. ❌ Mixed Content: The page at ’https://ordinary-todolist.netlify.app/login’ was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint ’http://43.201.130.34:8000/auth/signin’. This request has been blocked; the content must be served over HTTPS. 내용을 해석해보니 요청을 HTTPS로 보내라는 것이다. 하지만 내 REST API 서버는 HTTPS 통신 설정도 안한 작고 소중한 아이였다.. 어쩔수 없지. 까짓거 한다. 도메인 구매 HTTPS 통신을 설정하기 위해서는 SSL 인증서가 필요하고, SSL 인증을 받기 위해서는 도메인이 필요하다. 도메인을 구매할 수 있는 경로는 다양하다…","fields":{"slug":"/rest-api-https/"},"frontmatter":{"categories":"web","title":"REST API 서버에 HTTPS 통신 설정하기","date":"May 24, 2023"}},"next":{"fields":{"slug":"/react-rendering-optimization/"}},"previous":{"fields":{"slug":"/meta-theme-color/"}}},{"node":{"id":"c456e1a0-6b34-5e13-9a9e-9dde2bb5400f","excerpt":"무한 렌더링하는 컴포넌트를 정말 필요한 때에만 리렌더링하도록 최적화해봤습니다. 무한 렌더링을 탈출한 후, 과 를 이용해 리렌더링을 최적화합니다. 무한 렌더링 탈출하기 프로젝트는 간단한 투두리스트 앱으로 이렇게 생겼습니다.  백엔드 서버에 API 요청을 해서 투두리스트 관련 데이터를 다루고 있습니다. TodoList 컴포넌트에서 투두 리스트 데이터를 받아와 화면에 보여줘야 하는데 그러면 API 요청이 필수적입니다. 투두 리스트를 가장 최신 상태로 유지하는 것이 가장 좋지만 그러면 API 요청이 잦아지고 컴포넌트의 리렌더링도 잦아질수 있어 성능이 크게 떨어집니다. 따라서 API 요청 자체를 최적화해야 합니다. 최적화 전의 TodoList 컴포넌트는 이런 식으로 데이터를 받아오고 있습니다. 네, 맞습니다. 무한으로 데이터를 받아오는 최악의 상태입니다.  함수 안에서  함수를 통해 상태를 변화시키므로 TodoList 컴포넌트는 다시 렌더링되고 그러면  함수가 또 다시 실행되어 무한으로 즐…","fields":{"slug":"/react-rendering-optimization/"},"frontmatter":{"categories":"react","title":"리액트 렌더링 최적화하기","date":"May 24, 2023"}},"next":{"fields":{"slug":"/aws-mfa-iam/"}},"previous":{"fields":{"slug":"/rest-api-https/"}}},{"node":{"id":"d8ab4a06-efe8-5de2-b792-950753187384","excerpt":"올해 서버가 필요한 일이 많아 마구잡이로 AWS 프리티어 계정을 생성하면서 나에게도 몇천만원이 결제되는 일이 생길까봐 걱정이 되기 시작했다.. “설마 그럴일이 있겠어~” 싶었지만 그게 바로 사망플래그라고 주변에서 경고해서 최소한의 보안을 위해 앞으로는 MFA, IAM을 설정해주려 한다. MFA, IAM을 설정하는 방법을 설명하기에 앞서 MFA와 IAM은 당최 무엇인가? 간단하게 말하자면 MFA(Multi-Facfor Authentication)는 로그인할 때 더 까다롭게 인증하는 것이고, IAM(Identity and Access Management)은 AWS의 모든 기능에 접근할 수 있는 루트 사용자 대신 특정 기능만 사용할 수 있도록 사용자를 생성하는 것이다. 따라서 루트 사용자 계정에는 MFA를 적용해 접근하기 어렵게 만들고, 대신 IAM으로 권한을 줄인 사용자 계정을 만들어 사용하면 해당 사용자 계정이 털리더라도 몇천만원이 털리지는 않게 피해를 줄일 수 있다. 루트 사용자에…","fields":{"slug":"/aws-mfa-iam/"},"frontmatter":{"categories":"aws","title":"AWS 보안 향상하기 - MFA, IAM","date":"April 10, 2023"}},"next":{"fields":{"slug":"/react-v18/"}},"previous":{"fields":{"slug":"/react-rendering-optimization/"}}},{"node":{"id":"4fd083a3-112c-526f-bd73-807dc4d91ecb","excerpt":"React 18에서 가장 중요한 변화는 Concurrency, 동시성입니다. 동시성이 적용되기 전 동기식 렌더링의 경우, 업데이트가 렌더링을 시작하면 사용자는 화면에서 결과를 볼 수 있을 때까지 아무것도 중단할 수 없습니다. 동시성이 적용된 후 렌더링은 중단될 수 있습니다. (React 18로 업그레이드해도 createRoot 함수 등 동시성을 부여하는 기능을 사용하지 않으면 업그레이드 이전과 동일하게 동기적으로 렌더링합니다.) 동시 렌더링에서 리액트는 업데이트 렌더링을 시작하고, 중간에 일시중지한 다음 나중에 계속할 수 있습니다. 심지어 진행 중인 렌더링을 완전히 포기할 수 있습니다. 렌더링이 중단되더라도 UI가 일관되게 보일 것을 보장합니다. 이 기능을 통해 React는 메인 스레드를 차단하지 않고 백그라운드에서 새로운 화면을 준비할 수 있으며, 이것은 UI가 큰 렌더링 작업의 중간에 있더라도 사용자 입력에 즉시 응답하여 유동적인 사용자 경험을 만들 수 있다는 것을 의미합니다.…","fields":{"slug":"/react-v18/"},"frontmatter":{"categories":"react","title":"리액트 v18.0","date":"April 06, 2023"}},"next":{"fields":{"slug":"/csr-ssr-ssg/"}},"previous":{"fields":{"slug":"/aws-mfa-iam/"}}},{"node":{"id":"ad6d8e03-d20d-57bb-a9f3-0cfb67247382","excerpt":"Client Side Rendering 클라이언트 측에서 렌더링이 이루어지는 방식  Angular와 React와 같은 대부분의 웹 프레임워크가 지원하는 방식입니다. 기본적으로 웹 브라우저는 처음에 빈 HTML 파일을 로드합니다. 서버는 클라이언트에 필요한 데이터를 전달하고, 클라이언트는 받은 데이터를 이용해 HTML, CSS, JavaScript 등을 활용하여 브라우저에서 렌더링합니다. CSR은 초기 로딩 시간이 오래 걸릴 수 있지만, 이후 클라이언트 측에서의 상호작용에 대해서는 빠르게 처리할 수 있습니다. 일반적으로 단일 페이지 애플리케이션(SPA)과 많은 사용자 상호 작용(예: 게임)과 양식 및 채팅 애플리케이션과 같은 매우 역동적인 콘텐츠가 있는 애플리케이션에 적합합니다. CSR의 주요 단점은 검색 엔진에 최적화되어 있지 않다는 것입니다. CSR은 HTML 문서를 클라이언트 측에서 동적으로 렌더링하기 때문에 검색 엔진 크롤러가 이를 인식하지 못하고 색인하지 못할 가능성이 있습…","fields":{"slug":"/csr-ssr-ssg/"},"frontmatter":{"categories":"web","title":"CSR vs SSR vs SSG","date":"March 21, 2023"}},"next":{"fields":{"slug":"/laws-of-ux/"}},"previous":{"fields":{"slug":"/react-v18/"}}},{"node":{"id":"50629d1e-556d-58f2-9122-d42752a0509e","excerpt":"를 읽고 정리한 글 디자인을 결정할 때 프로젝트 이해관계자에게 좋은 디자인에 대한 근거로 사용하기 좋은 법칙들을 모아놨다. 1. 제이콥의 법칙 사용자는 다른 웹사이트를 통해 축적된 경험을 바탕으로 디자인 관례에 대한 기대치를 형성하는 경향을 보인다. 사용자는 새로운 시스템을 접할 때 기존의 경험을 활용한다. 따라서 기존에 경험했던 것과 비슷한 시스템이라면 큰 노력 없이 시스템이 어떻게 작동하는지 알 수 있지만, 기존에 경험했던 것이 아니라면 어떻게 작동하는지 노력을 들여 알아내야 한다. 기존에 통상적으로 사용되는 디자인을 사용하는 것이 사용자 경험이 좋다고 느낀다. 또 기존 디자인에서 다른 디자인으로 리디자인할 경우, 사용자가 거부감을 느끼지 않도록 점진적으로 바꾸거나 기존 디자인도 선택할 수 있도록 선택지를 주는 것이 좋다. 2. 피츠의 법칙 사용자가 대상을 사용하기까지 걸리는 시간은 대상의 크기와 대상까지의 거리와 연관이 있다. 대상이 작아지고 멀어질수록 선택하는 데 많은 시간…","fields":{"slug":"/laws-of-ux/"},"frontmatter":{"categories":"ui/ux","title":"UX/UI의 10가지 심리학 법칙","date":"March 21, 2023"}},"next":{"fields":{"slug":"/index-d-ts/"}},"previous":{"fields":{"slug":"/csr-ssr-ssg/"}}},{"node":{"id":"8ffa13c4-8966-54e6-8b5a-6afe5ad79212","excerpt":"React 프로젝트를 진행하면서 외부 라이브러리를 사용하다가 알수 없는 에러가 발생했다. 검색해도 무슨 에러인지 알 수 없어서 직접 코드를 뜯어보려고 ctrl 로 파고 들어갔는데, d.ts 파일만 나오고 인터페이스만 보여줄뿐 구체적인 코드는 안나오는 것이다. 결론적으로, 동작하는 코드는 해당 라이브러리의 여러 파일 중 어딘가에 자바스크립트 파일로 존재했다. ctrl 로 들어갈 수 없었을 뿐 존재했다. 그럼 d.ts 파일은 뭐지? 왜 존재하는지 알아봤다. TypeScript의 d.ts: 선언 파일 내가 들어갔던  파일은 TypeScript 코드로 작성한 선언 파일이다. d는 declaration, 선언을 의미한다. 선언 파일은 타입스크립트 코드가 타입을 추론할 수 있도록 선언해놓은 파일이다. 말그대로 선언 파일이어서 파일 안에 어떤 변수가 무슨 타입인지 선언해놓은 내용밖에 없다. 직접  파일에 들어가보면 수많은 declare와 인터페이스들이 반겨준다. 왜 있지? 라이브러리는 자바스크…","fields":{"slug":"/index-d-ts/"},"frontmatter":{"categories":"react typescript","title":"index.d.ts 파일의 정체는?","date":"July 13, 2022"}},"next":{"fields":{"slug":"/sop-cors/"}},"previous":{"fields":{"slug":"/laws-of-ux/"}}},{"node":{"id":"5d034a43-58de-510d-ad4e-5fb88731125c","excerpt":"내 웹사이트에서 Github Issue 기능으로 업로드한 사진에 접근하도록 개발하고 있었는데  에러와 부딪히면서 CORS와 SOP에 대해 알아보게 되었다. 여러가지 이유로 사진을 Github Issue가 아닌 별개의 Github Repository에 업로드하게 되면서  에러는 해결됐지만 정말 중요한 내용이라 잊지 않도록 간략하게 정리한다. 동일 출처 정책(SOP)이란? Same-Origin Policy 출처가 서로 다르다면 리소스 상호작용을 제한하는 보안 방식 아무 스크립트나 리소스와 상호작용할 수 있도록 두면 보안이 매우 취약해지기 때문에 출처가 같아야 상호작용할 수 있도록 제한한다. 여기서 출처라는 게 뭔지 알아보자. 출처란? 두 URL의 프로토콜, 도메인 이름, 포트(명시한 경우) 가 모두 같아야 동일한 출처다.  과 동일한 출처는 다음과 같다.   위 두 URL은 path만 다를 뿐 출처는 동일하다. 아래 URL들과 같이 protocol, domain name, port 중…","fields":{"slug":"/sop-cors/"},"frontmatter":{"categories":"web","title":"SOP & CORS","date":"May 23, 2022"}},"next":{"fields":{"slug":"/url/"}},"previous":{"fields":{"slug":"/index-d-ts/"}}},{"node":{"id":"063ecde1-79de-5876-920c-e9a81e141560","excerpt":"URL이란? Uniform Resource Locator 웹에서 정해진 유일한 리소스의 주소 URL은 웹에 게시된 어떤 자원(리소스)를 찾기 위해서 브라우저에 의해 사용되는 메카니즘이다. 각각의 URL은 유일한 리소스를 가리킨다. URL의 구조  Protocol 브라우저가 어떤 프로토콜을 사용하는지 프로토콜: 컴퓨터 네트워크에서 원할하게 데이터를 전송하기 위해 정한 규약 Domain Name 말그대로 도메인 이름 IP 주소가 사용되기도 함 Port 포트 번호 표준 HTTP 포트를 사용한다면 포트 번호가 생략됨 HTTP의 경우 80 생략, HTTPS의 경우 443 생략 Path 웹서버에서 리소스에 대한 경로 Parameters 웹서버에서 제공하는 추가 파라미터 으로 구분 Anchor 리소스 내에 정해진 위치를 보여주는 Anchor(닻)  뒤에 오는 부분은 가치가 없다고 판단해 절대 서버에 요청을 보내지 않음 URL과 URI 차이 URI(Uniform Resource Identifie…","fields":{"slug":"/url/"},"frontmatter":{"categories":"web","title":"URL의 구조","date":"May 23, 2022"}},"next":{"fields":{"slug":"/react-carousel/"}},"previous":{"fields":{"slug":"/sop-cors/"}}},{"node":{"id":"90f476fb-abf5-55a5-9dac-27c36f83f228","excerpt":"React로 캐러셀을 만들어보자. 캐러셀이 움직이게 만드는 건 어렵지 않았는데 CSS를 다룰 때 시간을 많이 빼앗겨서 CSS를 중심으로 설명하려 한다. Carousel이란? 직역하자면 ‘회전목마’로, 사진들이 순환하며 돌아가는 슬라이드 쇼를 나타낸다. 백문이 불여일견. 애플 홈페이지에 들어가 보자. 애플 홈페이지의 Carousel 이런 식으로 사진이 가로로 나열 왼쪽, 오른쪽 버튼을 통해 이동 가능 하다면 보통 캐러셀이라고 불린다. 내가 만들 Carousel 다양한 캐러셀들이 있지만 아래와 같이 간단한 모양의 캐러셀을 만들 것이다. 내가 만든 Carousel 내가 만들 캐러셀의 특징은 이렇다. 사진을 하나씩만 보여주고 양 옆으로 넘길 수 있음 아래에 점을 통해 몇번 째 사진을 보고 있는지 표시 1. 창틀 만들기 가로로 나열된 사진 여러개 중 하나만 보여주기 위해서 일부분만 보여주는 창틀을 하나 만든다. 일단 귀여운 코랄색 네모를 하나 만든다. 사진들을 넣었을 때 창틀에서 넘치지 않…","fields":{"slug":"/react-carousel/"},"frontmatter":{"categories":"react","title":"React로 Carousel 만들기","date":"May 04, 2022"}},"next":{"fields":{"slug":"/promise-async-await/"}},"previous":{"fields":{"slug":"/url/"}}},{"node":{"id":"fede7ad0-a5e9-505d-b17c-0f2ab4e0e379","excerpt":"비동기 작업을 제어하기 위해 콜백 함수를 중첩해서 사용하면 콜백 지옥에 빠질 수 있다. 콜백 지옥에 빠져 코드의 들여쓰기 수준이 너무 깊어졌다면 가독성도 떨어지고 나중에 코드를 수정하기도 힘들어진다. 이런 콜백 지옥을 막기 위해 사용할 수 있는 방법은 다음과 같다. 이 개념들을 이용해서 비동기 작업을 동기적으로 표현할 수 있다. Promise Generator async/await 와 는 ES6에서, 는 ES2017에서 도입됐다. 이 중에서 결이 비슷하다고 생각하는 Promise와 async/await를 정리했다. Generator는 간단하게 설명하면, yield 키워드와 next 메서드를 통해 함수 내부 코드가 순차적으로 실행되도록 제어하는 것이다. Promise Promise 객체는 비동기 작업이 어떻게 될지에 대한 결과를 나타낸다. Promise는 다음 중 하나의 상태를 가진다. : 이행하지도, 거부하지도 않은 초기 상태 : 연산이 성공적으로 완료됨 : 연산이 실패함 대기 상…","fields":{"slug":"/promise-async-await/"},"frontmatter":{"categories":"react","title":"Promise와 async/await","date":"April 18, 2022"}},"next":{"fields":{"slug":"/oci-ssh-error-troubleshooting/"}},"previous":{"fields":{"slug":"/react-carousel/"}}},{"node":{"id":"3e7ca2ec-da0a-5a2e-b957-a0157ecf6926","excerpt":"클라우드: Oracle Cloud Infrastructure 이미지: Canonical Ubuntu 20.04 OCI ubuntu 인스턴스에 올려놓은 애플리케이션이 갑자기 작동을 멈췄다. 확인하려고 PuTTY로 접속했는데 서버의 public key랑 private key가 일치하지 않는다고 떴다. 분명 과거에 일치했었고 세션에 저장까지 해둔 key인데..! 해킹된건지 뭐 때문인지 감이 안잡혀서 부트 볼륨을 떼서 분석해보기로 했다. 해당 인스턴스로 SSH 접속이 불가능한 상태이기 때문에 드라이브를 분리한 뒤 다음 과정대로 트러블슈팅했다. 장애가 발생한 인스턴스의 부트 볼륨을 분리 해당 부트 볼륨을 다른 멀쩡한 인스턴스의 블록 볼륨에 연결 디렉토리 마운트 & SSH 키 새로 생성 드라이브 분리하기 장애가 발생한 인스턴스의 부트 볼륨 탭에 들어간다. 부트 볼륨이란? 컴퓨트 인스턴스 부트를 위해 사용되는 이미지가 포함된 스토리지 장치  해당 부트 볼륨을 분리해준다. 다른 인스턴스에 드라이…","fields":{"slug":"/oci-ssh-error-troubleshooting/"},"frontmatter":{"categories":"oci","title":"OCI ubuntu 인스턴스 SSH 접속 장애 조치","date":"April 15, 2022"}},"next":{"fields":{"slug":"/kruskals-algorithm/"}},"previous":{"fields":{"slug":"/promise-async-await/"}}},{"node":{"id":"e8709aae-919a-5aa6-a552-9ccc88144719","excerpt":"코딩 테스트 문제를 풀다보면 마주치게 되는 크루스칼 알고리즘에 대해 알아봤다. What is Kruskal’s algorithm? 최소 비용 신장 부분 트리를 찾는 알고리즘 변의 개수를 E, 꼭짓점의 개수를 V라고 하면 이 알고리즘의 시간복잡도는 O(ElogV) 노드와 간선으로 이루어진 그래프가 있을 때, 가장 적은 비용으로 노드를 연결하는 방법을 찾는 알고리즘이다. 주로 간선마다 가중치가 있을 때 가장 적은 비용으로 연결하기 위해 사용한다. How it works 위키백과의 크루스칼 알고리즘 예제를 통해 어떻게 동작하는지 알아보자.  간선 옆에 있는 숫자는 변의 가중치를 가리킨다. 지금은 모든 간선의 색이 검정색이다. 앞으로 연결된 선은 녹색으로, 연결할 수 없는 선은 빨강으로 나타낸다.  가중치가 가장 작은 간선을 고른다. 지금처럼 가중치가 가장 작은 선이 두개을 경우 아무거나 골라 선택하면 된다. AD 와 CE 중 AD를 선택하고, AD는 연결된 선이기 때문에 녹색으로 변경한…","fields":{"slug":"/kruskals-algorithm/"},"frontmatter":{"categories":"algorithm","title":"크루스칼 알고리즘","date":"March 23, 2022"}},"next":{"fields":{"slug":"/gh-pages-react/"}},"previous":{"fields":{"slug":"/oci-ssh-error-troubleshooting/"}}},{"node":{"id":"cfb6f82f-09f3-57cf-ac15-1a62d79ebb48","excerpt":"GitHub 레포지토리에 작성한 코드를 무료로 배포하는 방법을 알아봅시다. 이 글은 다음과 같은 사람들을 대상으로 작성되었습니다. GitHub 레포지토리에 있는 코드로 웹 배포하려는 사람들 React를 사용하는 사람들 GitHub Pages 시작하기에 앞서, GitHub Pages는 뭘까요? GitHub Pages는 당신의 GitHub repository의 코드를 host해주는 기능입니다. GitHub repository에 코드를 올리고 몇가지 설정만 해주면 무료로 웹 배포를 할 수 있습니다. 보통 웹 배포를 직접 하려면 다음 두 가지가 필요합니다. 유료 서버 혹은 낮은 성능의 무료 서버 구하기 (비용 혹은 유지보수 문제) 그 서버에 웹 배포를 위한 여러가지 세팅을 해주기 (복잡함) 직접 웹 배포를 해보는 것도 좋지만 굳이 그럴 필요가 없는 사람들은 GitHub Pages를 쓰는 게 편합니다. GitHub Pages 들어가보기 그럼 어디서 설정할 수 있는지 알아봅시다. 설정하고 싶…","fields":{"slug":"/gh-pages-react/"},"frontmatter":{"categories":"react","title":"gh-pages로 내 React 웹사이트 배포하기","date":"March 11, 2022"}},"next":{"fields":{"slug":"/on-animation-end/"}},"previous":{"fields":{"slug":"/kruskals-algorithm/"}}},{"node":{"id":"aef1674d-ecf4-5669-8e99-25736e1f3836","excerpt":"간단한 투두리스트 페이지를 만들던 중 유저가 빈 내용을 입력했을 때 빈 내용을 입력했음을 알려주는 팝업을 띄웠다가 자동으로 사라지게 하고 싶었다. 팝업 컴포넌트를 만들고 슥 나타나는 애니메이션까지는 추가했는데 다시 슥 사라지게 하는게 어려웠다. setTimeout 함수를 사용해서 2초 후에 팝업 컴포넌트를 사라지도록 상태 관리하고 1초 동안 fade in 애니메이션을, 1초 동안 fade out 애니메이션을 적용했지만 함수가 시작하는 타이밍과 애니메이션이 시작하는 타이밍이 정확하게 맞아떨어지지 않아 매우 거슬리게 동작했다. 그래서 React unmount animation로 검색해보니 보통 다음과 같은 방법을 쓰는 것 같다. animation, transition 관련 패키지를 사용하기 애니메이션 상태를 결정하는 state를 만들어서 사용하기 웬만하면 패키지는 사용하고 싶지 않았고 두번째 방법은 보통 unmount하는 시점이 특정 행동에 따라 달라질 때 사용하는 것 같았다. 나는 …","fields":{"slug":"/on-animation-end/"},"frontmatter":{"categories":"react","title":"onAnimationEnd로 애니메이션이 끝났을 때 특정 함수 실행하기","date":"March 01, 2022"}},"next":{"fields":{"slug":"/dfs-bfs/"}},"previous":{"fields":{"slug":"/gh-pages-react/"}}},{"node":{"id":"a1c9f37f-9a8a-5279-a67f-d4b812642efa","excerpt":"그래프의 모든 노드를 방문하려면 어떻게 해야 할까? 가장 대표적인 탐색방법인 DFS와 BFS에 대해 알아보자. Depth First Search (DFS) 한 길을 깊게 파서 탐색 자신과 연결된 노드 중 한 노드를 탐색 탐색 과정 다음과 같은 그래프가 있다.  1. 시작 노드에서 갈 수 있는 노드 중 하나를 선택하여 탐색한다.  그래프에서 0 을 시작 노드로 정하고, 갈 수 있는 노드 중 1 을 선택했다. 2. ① 과 같은 방법으로 탐색을 반복한다. (이미 방문한 노드는 선택지에서 제외)  1번 노드에서 갈 수 있는 선택지 0 과 2 중, 0은 이미 방문했으므로 2를 선택한다.  2번 노드에서 갈 수 있는 선택지 0 과 3 중, 0은 이미 방문했으므로 3를 선택한다. 3. 다음으로 탐색해야 할 노드가 없다면 해당 노드를 호출한 부모 노드로 돌아가 더 탐색해야 할 노드가 있는지 찾는다.  3번 노드에서 더 이상 갈 수 있는 선택지가 없으므로, 2번 노드로 돌아간다.  2번 노드에서는…","fields":{"slug":"/dfs-bfs/"},"frontmatter":{"categories":"algorithm","title":"깊이우선탐색(DFS)과 너비우선탐색(BFS)","date":"February 04, 2022"}},"next":{"fields":{"slug":"/ubuntu-nginx-react-hosting/"}},"previous":{"fields":{"slug":"/on-animation-end/"}}},{"node":{"id":"da0719bc-db1b-5f8d-bbc3-3c39d7643dad","excerpt":"OCI에서 ubuntu 인스턴스를 만들고 nginx를 이용해서 react 프로젝트를 호스팅했다. OCI에 무료 인스턴스가 남아있어 AWS가 아닌 OCI를 사용했는데 OCI와 AWS가 좀 달라서 헷갈렸다. 인스턴스 만들고 기본적인 설정하기 먼저 OCI에 ubuntu 인스턴스를 만든다. 1. VCN 생성하고 인스턴스에 연결하기 웹 호스팅이기 때문에 인스턴스를 만든 뒤 웹과 관련된 포트를 꼭 열어줘야 한다. http로 접속하는 것을 허용하려면 80을, https로 접속하는 것을 허용하려면 443을 열어야 한다. 그러기 위해서 OCI의 VCN(가상 클라우드 네트워크) 메뉴에서 VCN을 생성한다. 아래와 같이 VCN 마법사를 통해 손쉽게 만들 수 있다.  만들어진 VCN의 공용 서브넷에 들어가 수신 규칙을 추가한다. 난 아래 체크된 것처럼 80, 443, 3000 세가지 포트를 추가해줬다.  인스턴스에 만들어둔 VCN을 적용한다.  🔥 VNIC가 생성되지 않을 때 이미 VNIC가 존재하는 …","fields":{"slug":"/ubuntu-nginx-react-hosting/"},"frontmatter":{"categories":"react oci","title":"ubuntu에서 nginx를 이용해서 react 호스팅하기","date":"January 29, 2022"}},"next":{"fields":{"slug":"/react-props-state/"}},"previous":{"fields":{"slug":"/dfs-bfs/"}}},{"node":{"id":"c2c0fabb-26f5-5e1e-bf66-8f7b99a05a76","excerpt":"React의 props와 state, 그리고 둘의 차이점에 대해 알아보자. props props (properties) 컴포넌트 속성을 설정할 때 사용하는 요소 props 값은 부모 컴포넌트에서 설정한다. 컴포넌트 자신은 해당 props를 읽기 전용으로만 사용한다. props 사용하기 : 해당 속성이름으로 설정한 값 : 컴포넌트 태그 사이의 내용 : props 기본값 설정 : props 타입 설정  붙이면 필수로 지정해줘야 하는 값 컴포넌트 App에서 MyCom 컴포넌트의 props를 다음과 같이 설정했을 때, MyCom 컴포넌트가 함수 컴포넌트라면 다음과 같이 작성한다. MyCom 컴포넌트가 클래스 컴포넌트라면 다음과 같이 작성한다. props 기본값과 props 타입을 설정하는 코드는 함수 컴포넌트, 클래스 컴포넌트에 관계없이 동일하다. 함수 컴포넌트는 props를 매개변수로 받아오고, 클래스 컴포넌트는  함수에서 를 통해 조회할 수 있다. state state 컴포넌트가 자체…","fields":{"slug":"/react-props-state/"},"frontmatter":{"categories":"react","title":"React의 props와 state","date":"December 18, 2021"}},"next":{"fields":{"slug":"/binary-tree/"}},"previous":{"fields":{"slug":"/ubuntu-nginx-react-hosting/"}}},{"node":{"id":"6abfcef1-ae51-5dd3-a232-8b3f4e7336ce","excerpt":"트리(Tree)란? 계층적인 구조를 나타내며, 부모-자식 관계의 노드들로 이루어짐 리스트, 스택, 큐와 같은 선형 자료구조가 아닌 비선형 자료구조 컴퓨터 디스크의 디렉터리 구조도 트리에 해당한다. 트리 용어 node: 트리의 구성요소 root: 부모가 없는 노드 subtree: 하나의 노드와 그 노드의 자손들로 이루어진 트리 terminal node(단말노드): 자식이 없는 노드 non-terminal node(비단말노드): 적어도 하나의 자식을 가지는 노드 level: 트리의 각 층의 번호 트리의 height(높이): 트리의 최대 레벨 노드의 degree(차수): 노드가 가지고 있는 자식 노드의 개수 edge(간선): 노드와 노드를 연결하는 선 트리의 degree(차수): 트리가 가지고 있는 노드의 차수 중에서 가장 큰 차수 forest: 트리들의 집합 이진트리(Binary tree)란? 자식 노드의 개수가 최대 2개인 트리 자료구조 서브트리 간에 순서가 존재하여 왼쪽과 오른쪽 …","fields":{"slug":"/binary-tree/"},"frontmatter":{"categories":"algorithm","title":"이진트리","date":"December 13, 2021"}},"next":{"fields":{"slug":"/html-conventions/"}},"previous":{"fields":{"slug":"/react-props-state/"}}},{"node":{"id":"c665068d-5f80-587f-a7d2-2c2c14f47a53","excerpt":"시작하기에 앞서, Convention이란 무엇일까요? Convention은 ‘관습’이라는 의미로 Coding Convention은 코드를 읽기 쉽도록 일관되고 체계적으로 유지하는 것입니다. 일정 기준에 맞춰서 코드를 작성하는 것은 협업에서 중요한 일입니다. HTML을 작성하면서 지켜야할 Convention에 대해 알아봤습니다. 적절한 문서구조 사용하기 HTML 문서는 , ,  요소가 없어도 대부분 잘 작동합니다. 하지만 다음과 같은 문제가 발생할 수 있습니다. 를 생략하면 오래된 브라우저에서 오류를 발생할 수 있습니다. 과 를 생략하면 DOM과 XML 소프트웨어가 충돌할 수 있습니다. 없이 과 만 존재할 경우, 브라우저는  이전의 모든 요소를 기본 에 추가해줍니다. 하지만 기본적으로 를 작성하는 것이 좋습니다. 따라서 다음과 같은 적절한 문서 구조를 사용해서 오류를 방지하고 일관성을 유지해야 합니다. Doctype 올바르게 선언하기 문서 유형은 항상 첫번째 줄로 선언해야 합니다. …","fields":{"slug":"/html-conventions/"},"frontmatter":{"categories":"html","title":"HTML 컨벤션","date":"October 08, 2021"}},"next":{"fields":{"slug":"/html-form/"}},"previous":{"fields":{"slug":"/binary-tree/"}}},{"node":{"id":"20d22e82-d459-53bd-8e91-e0f79e43632f","excerpt":"HTML을 통해 사용자로부터 데이터를 받기 위해  요소를 사용합니다.\nForm은 무엇인지, 어떻게 사용하는지 알아봤습니다. Form이란? 사용자와 웹사이트 또는 어플리케이션이 서로 상호 작용하는 기술 웹사이트 안 폼을 통해 사용자는 데이터를 전송할 수 있습니다. 폼을 사용하기 위해서는  요소를 사용해야 합니다.  요소는 정보를 제출하기 위한 대화형 컨트롤을 포함하는 문서 구획을 의미합니다. Form 사용하기 아래와 같이  요소를 사용할 수 있습니다. , , ,  등 을 사용해서 Form을 구성할 수 있습니다. 위 form 에서는 을 사용해서 데이터를 받고 Form을 제출했습니다. 데이터를 받는  요소에는 name 속성을 꼭 부여해줘야 합니다. 그렇지 않으면 Form을 제출해도 데이터를 사용할 수 없습니다. Form을 제출하기 위해서는  말고도 을 사용할 수 있습니다. 은 type 속성의 기본값이 “submit” 이므로 과 달리 type을 따로 명시하지 않아도 됩니다. 참고 나의 첫…","fields":{"slug":"/html-form/"},"frontmatter":{"categories":"html","title":"HTML Form","date":"October 06, 2021"}},"next":{"fields":{"slug":"/html-basics/"}},"previous":{"fields":{"slug":"/html-conventions/"}}},{"node":{"id":"d5c021ee-8381-5b68-a133-9ef647407847","excerpt":"HTML이란? Hypertext Markup Language 웹페이지가 어떻게 구조화되어 있는지 브라우저가 알 수 있도록 하는 마크업 언어 HTML를 통해 웹페이지의 구조를 나타낼 수 있습니다. HTML은 프로그래밍 언어가 아닌 마크업 언어라는 것을 알고 있어야 합니다. HTML은 이런 식으로 태그를 열고 닫아 작성할 수 있습니다. 태그가 아래처럼 제대로 닫히지 않을 경우 제대로 동작하지 않습니다. 블럭 레벨 요소와 인라인 요소 HTML은 블럭 레벨 요소(Block level element)와 인라인 요소(Inline element)라는 두가지 요소(Element)를 가집니다. 이 요소들은 CSS의 Block boxes와 Inline boxes 와는 다른 단어입니다. 블럭 레벨 요소 Block level element 웹페이지 상에 블록(Block)을 만드는 요소입니다. 앞뒤 요소 사이에 새로운 Line을 만듭니다. 일반적으로 페이지의 구조적 요소를 나타낼 때 사용됩니다. 주로 사…","fields":{"slug":"/html-basics/"},"frontmatter":{"categories":"html","title":"HTML 기초","date":"October 05, 2021"}},"next":{"fields":{"slug":"/how-does-internet-work/"}},"previous":{"fields":{"slug":"/html-form/"}}},{"node":{"id":"9972d4ba-b433-5519-9f33-a251b843c83c","excerpt":"인터넷이란? 컴퓨터들이 서로 통신 가능한 거대한 네트워크 인터넷은 컴퓨터로 연결하여 TCP/IP를 이용해 정보를 주고받는 컴퓨터 네트워크입니다. 여기서 TCP/IP 란? Transmission Control Protocol(전송 제어 규약)과 Internet Protocol(인터넷 규약) 컴퓨터 사이의 통신 표준 및 네트워크의 라우팅 및 상호연결에 대한 자세한 규칙을 지정하는 프로토콜 스위트 데이터가 어떻게 웹을 건너 여행해야 하는지 정의하는 통신 규약 우리는 어떻게 바다 건너 먼 나라의 컴퓨터와 통신할 수 있을까요? 인터넷은 어떻게 동작할까요? 인터넷이 동작하는 방법  각 컴퓨터는 라우터라는 특수한 소형 컴퓨터에 연결됩니다. 라우터는 컴퓨터에서 보낸 메세지가 올바른 대상 컴퓨터에 최적의 경로로 도착할 수 있도록 중계 역할을 합니다. 그 라우터를 아주 먼 곳의 라우터에 연결하기 위해서 전화기 기반의 시설을 이용합니다. 전화기 기반의 시설은 이미 세계 어느 곳에서도 연결되어 있기 때…","fields":{"slug":"/how-does-internet-work/"},"frontmatter":{"categories":"web","title":"인터넷은 어떻게 동작할까?","date":"September 30, 2021"}},"next":{"fields":{"slug":"/discordjs-claases/"}},"previous":{"fields":{"slug":"/html-basics/"}}},{"node":{"id":"6578379b-f026-57c0-a136-8050cbb7f281","excerpt":"Discord.js를 이용해 디스코드 봇을 만들면서 자주 사용한 클래스와 함수들을 정리한 글입니다. 궁금한 것은 직접 코드를 뜯어 보는 게 더 좋습니다. 공식문서는 클래스, 함수에 대한 간략한 설명을 찾을 때 유용합니다. version - Discord.js: 13.1.0 - node.js: 16.8.0 Client Discord API와 상호작용하기 위한 기본 허브이자 모든 봇의 시작점 사용한 변수 channels  클라이언트가 현재 처리하고 있는 모든 서버의 모든 채널 guilds  클라이언트가 현재 처리하고 있는 모든 서버 users  모든 사용자 사용한 함수  클라이언트 로그인, Discord에 웹소켓 연결  Client 클래스는 EventEmitter를 extends함 Discord에서 특정 이벤트 수행시 작동하는 코드 작성 가능 ClientEvents Client가 Discord에서 어떤 이벤트를 받아올 수 있는지 알수 있음 사용한 이벤트 ready client가 rea…","fields":{"slug":"/discordjs-claases/"},"frontmatter":{"categories":"discordjs","title":"Discord.js에서 자주 사용한 클래스들","date":"September 24, 2021"}},"next":{"fields":{"slug":"/tsconfig-json-input-error/"}},"previous":{"fields":{"slug":"/how-does-internet-work/"}}},{"node":{"id":"8a64735c-7264-52bd-8a45-c1dcd3c6d40c","excerpt":"파일에서 발생한  오류를 해결하기 위해 노력한 과정입니다. 사용한 코드 편집기는 vscode입니다. 문제 발생 전 자바스크립트 프로젝트에서 es6을 사용하려면 babel을 설치해야 한다는 걸 알고 고민하다가 타입스크립트 프로젝트로 변환하기로 결심했습니다. 예전부터 타입스크립트를 적용하는 걸 염두에 두고 있었기 때문입니다. 기존 자바스크립트 프로젝트에 타입스크립트를 설치하고 개발환경을 설정했습니다. 문제 발생 을 통해 만들어진 에 한줄의 에러가 계속 없어지지 않았습니다. 구성 파일에서 입력을 찾을 수 없습니다. 어쩌구 저쩌구 … 이 에러는 아무짓도 하지 않았는데 발생했습니다. 설정이 덜 된줄 알고 include와 exclude를 추가하거나 별 짓을 다 해봐도 그 한줄은 없어지지 않았습니다. 문제 해결 과정 그러던 중 타입 스크립트 핸드북에서 다음을 찾았습니다. “compilerOptions” 속성은 생략될 수 있으며 생략하면 컴파일러의 기본 값이 사용됩니다. “files”과 “inc…","fields":{"slug":"/tsconfig-json-input-error/"},"frontmatter":{"categories":"typescript","title":"tsconfig.json 구성 파일에서 입력을 찾을 수 없습니다.","date":"September 18, 2021"}},"next":{"fields":{"slug":"/typescript-null-undefined-error/"}},"previous":{"fields":{"slug":"/discordjs-claases/"}}},{"node":{"id":"6ea110b8-e4d9-5a8f-90d0-7f56159d839b","excerpt":"typescript가 개체가 undefined, null 인 것 같다며 에러를 발생시키는 이유, 그리고 실행하도록 설득하는 방법에 대해 알아봤습니다. 문제 상황 에서 다음과 같이 설정된 경우 null 과 undefined 문제를 엄격하게 관리합니다. 따라서 다음과 같은 에러가 자주 발생합니다. 개체가 ‘undefined’인 것 같습니다.ts(2532) 개체가 ‘null’인 것 같습니다.ts(2531) 변수 중 Date 와 null 이 둘다 들어가는 경우 다음과 같은 에러도 발생합니다. ‘null’ 형식은 ‘Date’ 형식에 할당할 수 없습니다.ts(2322) 문제 해결 위 에러는 세가지 방법으로 해결할 수 있습니다. 1. 타입을 any로 정하기 any를 사용하면 TypeScript를 사용하는 의미가 없어보여 찜찜합니다. 2. 유니온 타입 사용하기 어떤 타입인지 한눈에 들어오지 않습니다. 3. “strictNullChecks”: false 위 두 방법을 사용해도 개체가 undefin…","fields":{"slug":"/typescript-null-undefined-error/"},"frontmatter":{"categories":"typescript","title":"typescript 개체가 null, undefined인 것 같습니다?","date":"September 18, 2021"}},"next":{"fields":{"slug":"/prime-number/"}},"previous":{"fields":{"slug":"/tsconfig-json-input-error/"}}},{"node":{"id":"6331e34c-e54d-5169-bf53-7f223c0d5e07","excerpt":"특정 수가 소수인지 판별해내는 함수를 JavaScript로 구현하고자 합니다. 먼저 소수가 무엇인지 알아봅시다. 소수(Prime Number)란? 1보다 큰 자연수 중 1과 자기 자신만을 약수로 가지는 수 위를 통해 소수의 기준을 다음과 같이 정의할 수 있습니다. 1보다 큰 자연수 1과 자기 자신만이 약수 간단하게 소수판별함수 구현하기 소수 은 과 자기자신만을 약수로 가지므로, 까지의 수로 나눴을 때 나머지가 이 아닙니다. 이를 이용해 간단한 소수 판별 함수를 만들 수 있습니다. 숫자 을 부터 까지 나눴을 때 나머지가 인지 체크합니다. 이 함수의 시간 복잡도는 입니다. 더 효율적인 소수판별함수 구현하기 소수 판별 함수를 더 빠르게 돌릴 수 있는 방법입니다. 보다 더 큰 수는 합성수이거나 소수일 수 밖에 없습니다. 직접 해보면 이해됩니다. 참고로 합성수는 1보다 큰 자연수 중 소수가 아닌 수를 의미합니다. 따라서 숫자 을 부터 까지 나눴을 때 나머지가 인지 체크합니다. 이 함수의 시…","fields":{"slug":"/prime-number/"},"frontmatter":{"categories":"algorithm javascript","title":"소수(Prime Number) 구하기","date":"September 13, 2021"}},"next":{"fields":{"slug":"/ubuntu-nodejs-setting/"}},"previous":{"fields":{"slug":"/typescript-null-undefined-error/"}}},{"node":{"id":"5804216f-7559-5d82-9f69-3fb506044154","excerpt":"디스코드 봇을 만들기 위해 오라클 클라우드 인스트럭쳐(OCI)에서 인스턴스 생성 후 세팅하는 과정입니다. image는 를, SSH client는 PuTTY를 사용했습니다. node 프로젝트를 실행합니다. 1. SSH 접속 OCI에서 얻어온 공용 IP 주소와 private key를 이용해서 접속합니다. 2. root 비밀번호 설정 비밀번호를 잊어버리지 않도록 적어둡시다. 계정 변경 방법 root 계정으로 변경 ubuntu 라는 계정으로 변경 3. 기본 업데이트 4. nodejs 설치 가 최소 v16.6 이상의 nodejs를 필요로 해서 최신 버전의 nodejs를 설치했습니다. curl이 설치되어있지 않는지 확인해줘야 합니다. 5. pm2 설치 세션 로그인이 끊어져도 노드 프로젝트가 돌아가도록 pm2 모듈을 설치합니다. 전역으로 사용하는 것이 편하므로 를 붙여줍니다. pm2란? JavaScript 런타임 Node.js의 프로세스 관리자입니다. : 프로세스 리스트 확인 : app.js …","fields":{"slug":"/ubuntu-nodejs-setting/"},"frontmatter":{"categories":"nodejs oci","title":"ubuntu nodejs 프로젝트 환경 만들기","date":"September 10, 2021"}},"next":{"fields":{"slug":"/cookie-parser/"}},"previous":{"fields":{"slug":"/prime-number/"}}},{"node":{"id":"80559800-1510-5542-8698-2a817bafe70a","excerpt":"cookie-parser란?  헤더를 파싱하고, 쿠키 이름에 의해 키가 지정된 객체로 를 채운다.  문자열을 전달하여 선택적으로 서명된(signed) 쿠키 지원을 활성화할 수 있다.  문자열은 다른 미들웨어에서 사용할 수 있도록 을 할당한다. 설치하기 API 사용하기 cookieParser(secret, options) secret, options 매개변수를 사용하여 새로운 쿠키파서 미들웨어 함수를 만든다. secret 쿠키 서명에 사용되는 문자열(string) 혹은 배열(array) 선택 사항이며, 만약 지정되지 않은 경우 서명된 쿠키를 파싱하지 않음 string이 주어진 경우, 으로 사용됨 array가 주어진 경우, 순서대로 각 을 사용하여 쿠키 서명을 해제하려고 시도함 options 두번째 옵션으로 에게 전달되는 객체 : 쿠키의 값을 디코딩하는 함수 미들웨어는 request에서  헤더를 파싱하고 쿠키 데이터를  속성으로 노출한다. 만약  값이 주어진 경우,  속성으로 표시한다…","fields":{"slug":"/cookie-parser/"},"frontmatter":{"categories":"javascript","title":"cookie-parser 사용하기","date":"June 22, 2021"}},"next":{"fields":{"slug":"/git-branch-command/"}},"previous":{"fields":{"slug":"/ubuntu-nodejs-setting/"}}},{"node":{"id":"67057ca0-65fc-56e1-9193-6d8341912042","excerpt":"자주 사용하는 git 명령어를 정리했습니다. git 관련 명령어 원격 저장소의 내용 갱신하기 branch 목록 관련 명령어 로컬 저장소의 branch 목록 보기 원격 저장소의 branch 목록 보기 모든 branch 목록 보기 branch 관리 명령어 현재 위치에서 새로운 branch 생성하기 다른 branch로 이동하기 branch 이름 변경하기 branch 삭제하기 원격 저장소의 branch 삭제하기 예를 들어 다음과 같이 작성할 수 있습니다. 원격 저장소의 특정 branch를 로컬 저장소의 새로운 branch로 가져오기 세번째 줄에서 pull을 하는 이유는  명령을 수행할 때 대상 Branch를 과거에 이미 가져온 기록이 있을 경우 원격 저장소에서 가져오는 것이 아닌, Cache된 정보를 가져오기 때문입니다. 예를 들어 다음과 같이 작성할 수 있습니다. 로컬 저장소의 변경 내용을 원격 저장소로 보내기 예를 들어 다음과 같이 작성할 수 있습니다. 참고 [GIT] Branch 관…","fields":{"slug":"/git-branch-command/"},"frontmatter":{"categories":"git","title":"자주 쓰는 git branch 명령어 모음","date":"June 11, 2021"}},"next":{"fields":{"slug":"/remove-node-modules/"}},"previous":{"fields":{"slug":"/cookie-parser/"}}},{"node":{"id":"b472b5c1-3d2d-5efd-a2ac-4e61a732c25b","excerpt":"github에 프로젝트를 올릴 때 node_modules를 제외하고 올리는 방법입니다. .gitignore 파일 만들기  파일은 Push할 때 무시할 파일 혹은 디렉토리를 적어놓은 파일입니다.  파일에 작성된 파일 혹은 디렉토리는 원격저장소에 저장되지 않습니다. 이  파일을 활용해서  디렉토리는 물론 다른 파일들도 원격저장소에 저장되지 않도록 할 수 있습니다.  이런 식으로 작성하면  디렉토리는 추적당하지 않습니다. 만약 이미 를 push했다면 어떻게 해야 할까요? 원격저장소의 node_modules 제거하기 이미 를 push하여 github에 모듈과 관련된 많은 파일들이 올라갔다면? 지금이라도 를 작성해주고, 저장소에서  디렉토리를 삭제해야 합니다.  파일과  파일이 있다면  명령어를 통해 언제든지  디렉토리를 생성할 수 있으니 삭제할 때 걱정하지 않아도 됩니다. 원격저장소,로컬저장소에서 삭제하기 원격저장소에서만 삭제하기 : 원격저장소만 해당 : recursive(재귀적으로), …","fields":{"slug":"/remove-node-modules/"},"frontmatter":{"categories":"git","title":"Github에서 node_modules 없애기","date":"June 11, 2021"}},"next":{"fields":{"slug":"/ssh-putty-xshell/"}},"previous":{"fields":{"slug":"/git-branch-command/"}}},{"node":{"id":"eb2b1bcb-9754-5e5b-9198-143db1665b52","excerpt":"SSH 클라이언트인 PuTTY와 Xshell을 이용해서 SSH 접속하는 방법을 정리했습니다. SSH(Secure SHell protocol)이란? 네트워크 프로토콜 중 하나로, 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령 실행하고 다른 시스템으로 파일을 복사할 수 있는 응용 프로그램 또는 그 프로토콜을 의미합니다. SSH 클라이언트를 이용해서 SSH 접속할 수 있습니다. SSH 클라이언트는 SSH 프로토콜을 이용해 원격 서버에서 접속하는 프로그램입니다. SSH 클라이언트로는 PuTTY, Xshell, MobaXTerm, OpenSSH Client 등등 이 있습니다. 가장 자주 사용되는 건 PuTTY이며 해당 게시글에서는 그 중 PuTTY와 Xshell 두개를 사용했습니다. PuTTY로 SSH 접속하기 를 사용했습니다.  1. [Session] 에서 Host Name과 Port를 입력하기 에 원하는 이름을 넣고  버튼을 누르면 저장되므로 세팅을 다시 할 수고를 줄여…","fields":{"slug":"/ssh-putty-xshell/"},"frontmatter":{"categories":"ssh","title":"PuTTY, Xshell를 이용해서 SSH 접속하기","date":"June 11, 2021"}},"next":null,"previous":{"fields":{"slug":"/remove-node-modules/"}}}],"categories":["All","react","html","web","aws","ui/ux","typescript","oci","algorithm","discordjs","javascript","nodejs","git","ssh"]}},"staticQueryHashes":["161131432","1956554647","2938748437"]}